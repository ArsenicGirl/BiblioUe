<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Registrar libros - administrador</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bulma@0.9.4/css/bulma.min.css">
    <link rel="stylesheet" href="resources/styles/addBook.css">
    <link rel="stylesheet" href="resources/styles/basic.css">
    <!-- CSS -->
    <link rel="stylesheet" href="//cdn.jsdelivr.net/npm/alertifyjs@1.13.1/build/css/alertify.min.css"/>
    <!-- Default theme -->
    <link rel="stylesheet" href="//cdn.jsdelivr.net/npm/alertifyjs@1.13.1/build/css/themes/default.min.css"/>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

</head>s
<body>

    <!-- Header y menú -->
    <header class="header">
        <nav class="nav-header">
            <!-- Logo del Laboratorio de Innovación Social -->
            <a href="/indexAdmin" class="header-logo">
                <img  src="resources/assets/logo-ue.svg" alt="logo" class="header-icon">
            </a>
            <!DOCTYPE html>
            <html>
            <head>
                <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bulma/0.9.3/css/bulma.min.css">
            </head>
            <body>
              <div class="containers">
                <div class="dropdown is-trigger">
                  <div class="dropdown-trigger">
                    <button class="button is-white" aria-haspopup="true" aria-controls="dropdown-menu">
                      <div class="media">
                        <div class="media-left">
                          <figure class="image is-64x64">
                            <img src="resources/assets/iconfinder_user_circle_duotone_9022927.svg" alt="logo" class="avatar-icon">
                          </figure>
                        </div>
                        <div class="media-content">
                          <span class="icon is-small">
                            <i class="fas fa-angle-down" aria-hidden="true"></i>
                          </span>
                        </div>
                      </div>
                    </button>
                  </div>
                  <div class="dropdown-menu" id="dropdown-menu" role="menu">
                    <div class="dropdown-content">
                      <a href="/adminProfile" class="dropdown-item">Ir al perfil</a>
                      <a href="/indexAdmin" class="dropdown-item">Opciones de administrador</a>
                      <a href="/" class="dropdown-item">Cerrar sesión</a>
                    </div>
                  </div>
                </div>
              </div>
              
        </nav>
    </header><br><br><br><br><br>

    <div class="container">
    <!--CRUD-->
    <div id="register-books" class="columns">
      <div class="column is-6">
        <div class="register-form-books">
        <div class="block">

        <form  id="addBook_form" class="box">
            <h2 class="title is-4"> <strong>Añadir un libro</strong></h2>
            <div class="field">
              <label class="label" for="titulo">Titulo</label>
              <div class="control">
                <input class="input" id="titulo" type="text" placeholder="ejm. 100 años de soledad">
              </div>
            </div>
          
            <div class="field">
              <label class="label" for="autor">Autor</label>
              <div class="control">
                <input class="input" id="autor" type="text" placeholder="ejm. Gabriel García Marquez">
              </div>
            </div>

            <label class="label" for="categoria">Cetegoría</label>
            <div class="select" for="rol" >
                <select id="categoria">
                  <option value="nada" select="selected">-</option>
                  <option value="1">Ficción</option>
                  <option value="1">No ficción</option>
                </select>
              </div>

              <div class="field">
                <label class="label" for="fecha">Año de publicación</label>
                <div class="control">
                  <input class="input" id="fecha" type="number" min="1400" max="2024" placeholder="Escriba el año">
                </div>
              </div>
              
        <div class="field">
            <label class="label" for="desc">Descripción</label>
            <textarea class="textarea " id="desc" placeholder="Escriba una breve descripción del libro"></textarea>
          </div>

              <input class="btnCrear button is-link" type="submit" value="Crear"/><br> <br>
            </form>
        </div>
        </div>
      </div>

      <hr>
      <!--Tabla de libros agregados-->
      <div class="book-list mt-4 shadow-lg p-3 mb-5 bg-body is-rounded">
      <table class="table is-bordered is-striped">
        <thead>
          <tr class="has-background-link">
            
            <th class="has-text-white">Id</th>
            <th class="has-text-white">Titulo</th>
            <th class="has-text-white">Autor</th>
            <th class="has-text-white">Categoría</th>
            <th class="has-text-white">Fecha</th>
            <th class="has-text-white">Descripción</th>
            <th class="has-text-white"> </th>
          </tr>
        </thead>
          <tbody>

          </tbody>
      </table>
        </div>
    </div>
    </div>
    <canvas id="BarChart" width="4" height="1" aria-label="chart" role="img"></canvas>
<script src="resources/scripts/iconMenu.js"></script>

    <script src="//cdn.jsdelivr.net/npm/alertifyjs@1.13.1/build/alertify.min.js"></script>
    <script>
class Libreria {
  constructor() {
    this.url = 'http://localhost:3000/api/book';
    this.contenedor = document.querySelector('tbody');
    this.results = '';
    this.formArticulos = document.querySelector('form');
    this.book_title = document.getElementById('titulo');
    this.book_author = document.getElementById('autor');
    this.book_category = document.getElementById('categoria');
    this.book_publishYear = document.getElementById('fecha');
    this.book_description = document.getElementById('desc');
    this.opcion = '';

    this.formArticulos.addEventListener('submit', this.onSubmit.bind(this));
    this.fetchAndDisplayBooks();
  }

  async save(data) {
    try {
      const response = await axios({
        method: 'post',
        url: this.url,
        data: data
      });
      console.log(response);
      this.mostrarAlerta("Libro registrado satisfactoriamente", "is-success");
    } catch (error) {
      console.warn(error);
    }
  }

  async onSubmit(e) {
    e.preventDefault();
    const data = {
      book_title: this.book_title.value,
      book_description: this.book_description.value,
      book_author: this.book_author.value,
      book_publishYear: parseInt(this.book_publishYear.value),
      cate_id: parseInt(this.book_category.value)
    };

    console.log(data);
    await this.save(data);
    this.formArticulos.reset();
    this.opcion = this.cleanForm(document.getElementById("addBook_form").reset());
  }

  mostrarAlerta(mensaje, estilo) {
    const div = document.createElement("div");
    div.className = `notification ${estilo}`;
    div.appendChild(document.createTextNode(mensaje));

    this.formArticulos.parentNode.insertBefore(div, this.formArticulos);

    setTimeout(() => {
      div.remove();
    }, 3000);
  }

  async fetchAndDisplayBooks() {
    try {
      const response = await fetch(this.url);
      const data = await response.json();
      this.mostrar(data);
    } catch (error) {
      console.log(error);
    }
  }

  mostrar(books) {
    books.forEach((book) => {
      this.results += `
        <tr>
          <td>${book.book_id}</td>
          <td>${book.book_title}</td>
          <td>${book.book_author}</td>
          <td>${book.book_category}</td>
          <td>${book.book_publishYear}</td>
          <td>${book.book_description}</td>
          <td class="text-center">
            <a class="btn-edit button is-success is-light">Editar</a>
            <a class="btn-delete button is-danger is-light">Eliminar</a>
          </td>
        </tr>
      `;
    });
    this.contenedor.innerHTML = this.results;
  }

  cleanForm(form) {
    // Implementa tu lógica para limpiar el formulario si es necesario
  }
}

// Instanciar la clase Libreria
const libreria = new Libreria();

/*
const url ='http://localhost:3000/api/book';
const contenedor = document.querySelector ('tbody');
let results = '';
const formArticulos = document.querySelector('form');
const book_title = document.getElementById('titulo');
const book_author = document.getElementById('autor');
const book_category = document.getElementById('categoria');
const book_publishYear = document.getElementById('fecha');
const book_description = document.getElementById('desc');
let opcion = '';

const save = async (data) => {
  try {
    const response = await axios({
      method: 'post',
      url: 'http://localhost:3000/api/book',
      data: data
    });
    console.log(response);
    // Mostrar alerta de éxito
    mostrarAlerta("Libro registrado satisfactoriamente", "is-success");
  } catch (error) {
    console.warn(error);
  }
};

// Eliminar los datos del formulario cuando se cree un registro
formArticulos.addEventListener('submit', async (e) => {
  e.preventDefault();
  let data = {
    book_title: book_title.value,
    book_description: book_description.value,
    book_author: book_author.value,
    book_publishYear: parseInt(book_publishYear.value),
    cate_id: parseInt(book_category.value)
  };

  console.log(data);
  await save(data);
  // Restablecer el formulario
  formArticulos.reset();
  opcion = cleanForm(document.getElementById("addBook_form").reset());
});

// Función para mostrar una alerta de Bulma
function mostrarAlerta(mensaje, estilo) {
  const div = document.createElement("div");
  div.className = `notification ${estilo}`;
  div.appendChild(document.createTextNode(mensaje));

  // Insertar la alerta antes del formulario
  formArticulos.parentNode.insertBefore(div, formArticulos);

  // Eliminar la alerta después de 3 segundos
  setTimeout(() => {
    div.remove();
  }, 3000);
}

// ...

// Función para mostrar los datos
const mostrar = (books) => {
  books.forEach((book) => {
    results += `
      <tr>
        <td>${book.book_id}</td>
        <td>${book.book_title}</td>
        <td>${book.book_author}</td>
        <td>${book.book_category}</td>
        <td>${book.book_publishYear}</td>
        <td>${book.book_description}</td>
        <td class="text-center">
          <a class="btn-edit button is-success is-light">Editar</a>
          <a class="btn-delete button is-danger is-light">Eliminar</a>
        </td>
      </tr>
    `;
  });
  contenedor.innerHTML = results;
};



    //delete

const url2 ='http://localhost:3000/api/book'
    fetch(url2)
  .then(response => response.json())
  .then(data => mostrar(data))
  .catch(error => console.log(error));

const on = (element, event, selector, handler) => {
  element.addEventListener(event, e => {
    if (e.target.closest(selector)) {
      handler(e);
    }
  });
};

on(document, 'click', '.btn-delete', e => {
  const target = e.target;
  const fila = target.parentNode.parentNode;
  const id = fila.firstElementChild.innerHTML;
  alertify.confirm('Confirm Message',
    function () {
      fetch(url2 + id, {
        method: 'DELETE'
      })
        .then(res => {
          if (res.ok) {
            fila.remove(); // Elimina la fila de la tabla en la interfaz de usuario
          } else {
            console.error('Error al eliminar:', res.status, res.statusText);
          }
        })
        .catch(error => {
          console.error('Error al eliminar:', error);
        });
    },
    function () {
      alertify.error('Cancel');
    });
});


    /*
axios.get(url)
  .then(response => {
    const data = response.data;
    mostrar(data);
  })
  .catch(error => console.log(error));

const on = (element, event, selector, handler) => {
  element.addEventListener(event, e => {
    const target = e.target.closest(selector);
    if (target) {
      handler(e, target);
    }
  });
};

on(document, 'click', '.btn-delete', (e, target) => {
  const fila = target.parentNode.parentNode;
  const id = fila.firstElementChild.innerHTML;
 alertify.confirm('Confirm Message', 
  function() { 
      axios.delete(url + id)
        .then(() => {
          // Eliminación exitosa
          fila.remove(); // Elimina la fila de la tabla en la interfaz de usuario
        })
        .catch(error => {
          console.error('Error al eliminar:', error);
        });
    },
    function() { 
      alertify.success('Cancel');
    }
  );
});*/
  

const url2 ='http://localhost:3000/api/book'
    fetch(url2)
  .then(response => response.json())
  .then(data => mostrar(data))
  .catch(error => console.log(error));

const on = (element, event, selector, handler) => {
  element.addEventListener(event, e => {
    if (e.target.closest(selector)) {
      handler(e);
    }
  });
};

on(document, 'click', '.btn-delete', e => {
  const target = e.target;
  const fila = target.parentNode.parentNode;
  const id = fila.firstElementChild.innerHTML;
  alertify.confirm('Confirm Message',
    function () {
      fetch(url2 + id, {
        method: 'DELETE'
      })
        .then(res => {
          if (res.ok) {
            fila.remove(); // Elimina la fila de la tabla en la interfaz de usuario
          } else {
            console.error('Error al eliminar:', res.status, res.statusText);
          }
        })
        .catch(error => {
          console.error('Error al eliminar:', error);
        });
    },
    function () {
      alertify.error('Cancel');
    });
});


    /*
axios.get(url)
  .then(response => {
    const data = response.data;
    mostrar(data);
  })
  .catch(error => console.log(error));

const on = (element, event, selector, handler) => {
  element.addEventListener(event, e => {
    const target = e.target.closest(selector);
    if (target) {
      handler(e, target);
    }
  });
};

on(document, 'click', '.btn-delete', (e, target) => {
  const fila = target.parentNode.parentNode;
  const id = fila.firstElementChild.innerHTML;
 alertify.confirm('Confirm Message', 
  function() { 
      axios.delete(url + id)
        .then(() => {
          // Eliminación exitosa
          fila.remove(); // Elimina la fila de la tabla en la interfaz de usuario
        })
        .catch(error => {
          console.error('Error al eliminar:', error);
        });
    },
    function() { 
      alertify.success('Cancel');
    }
  );
});*/
    </script>

<!--grafica-->
<script src="https://cdn.jsdelivr.net/npm/chart.js@latest/dist/Chart.min.js"></script>

<script>
   var ctx = document.getElementById('BarChart'); // Cambia 'crx' a 'ctx'
var BarChart = new Chart(ctx, {
    type: 'bar',
    data: {
       //labels: [], //  las etiquetas (categorías)
        datasets: [{
            label: 'Cantidad de libros según el año de públicación',
           // data: [9], // los datos (cantidad de libros)
            backgroundColor: ['rgba(255, 99, 132, 0.2)', 'rgba(255, 159, 64, 0.2)', 'rgba(255, 205, 86, 0.2)'],
            borderColor: ['rgb(255, 99, 132)', 'rgb(255, 159, 64)','rgb(255, 205, 86)'],
            borderWidth: 1
        }]
    },
    options: {
        scales: {
            y: {
                beginAtZero: true
            }
        }
    }
});

let url3 = 'http://localhost:3000/api/book';

fetch(url3)
    .then(response => response.json())
    .then(datos => ejecutar(datos)) // Cambia 'mosttar' a 'ejecutar'
    .catch(error => console.log(error));

const ejecutar = (data) => {
    // Crear un objeto para almacenar los recuentos por año
    const yearCounts = {};

    data.forEach(element => {
        const year = element.book_publishYear; // Usar el nombre correcto del campo
        if (yearCounts[year]) {
            yearCounts[year]++;
        } else {
            yearCounts[year] = 1;
        }
    });

    // Obtener las etiquetas (años) y datos (cantidad de libros por año)
    const years = Object.keys(yearCounts).sort();
    const bookCounts = years.map(year => yearCounts[year]);

    // Actualizar el gráfico
    BarChart.data.labels = years;
    BarChart.data.datasets[0].data = bookCounts;
    BarChart.update();
}


</script>
</body>
</html>